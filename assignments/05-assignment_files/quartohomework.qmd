---
title: "quartohomework"
author: "Sean Jeon"
date: "Feburuary 25th, 2025"
bibliography: references.bib

---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{python}
# Install the necessary libraries
# pip install pandas
# pip install wbgapi

# Import the libraries
import pandas as pd
import wbgapi as wb
```




```{python}
# Define the indicators to download
import pandas as pd
import wbgapi as wb
indicators = {
    'gdp_per_capita': 'NY.GDP.PCAP.CD',
    'gdp_growth_rate': 'NY.GDP.MKTP.KD.ZG',
    'inflation_rate': 'FP.CPI.TOTL.ZG',
    'unemployment_rate': 'SL.UEM.TOTL.ZS',
    'total_population': 'SP.POP.TOTL',
    'life_expectancy': 'SP.DYN.LE00.IN',
    'adult_literacy_rate': 'SE.ADT.LITR.ZS',
    'income_inequality': 'SI.POV.GINI',
    'health_expenditure_gdp_share': 'SH.XPD.CHEX.GD.ZS',
    'measles_immunisation_rate': 'SH.IMM.MEAS',
    'education_expenditure_gdp_share': 'SE.XPD.TOTL.GD.ZS',
    'primary_school_enrolment_rate': 'SE.PRM.ENRR',
    'exports_gdp_share': 'NE.EXP.GNFS.ZS'
}

# Get the list of country codes for the "World" region
country_codes = wb.region.members('WLD')

# Download data for countries only in 2022
df = wb.data.DataFrame(indicators.values(), economy=country_codes, time=2022, skipBlanks=True, labels=True).reset_index()

# Delete the 'economy' column
df = df.drop(columns=['economy'], errors='ignore')

# Create a reversed dictionary mapping indicator codes to names
# Rename the columns and convert all names to lowercase
df.rename(columns=lambda x: {v: k for k, v in indicators.items()}.get(x, x).lower(), inplace=True)

# Sort 'country' in ascending order
df = df.sort_values('country', ascending=True)

# Reset the index after sorting
df = df.reset_index(drop=True)

# Display the number of rows and columns
print(df.shape)

# Display the first few rows of the data
print(df.head(3))

# Save the data to a CSV file
df.to_csv('wdi.csv', index=False)
```



```{python}
# Task 3
df[['gdp_per_capita', 'inflation_rate', 'life_expectancy']].describe()
```


```{python}
# Task 4
import matplotlib.pyplot as plt

# Select top 10 countries
top_gdp = df[['country', 'gdp_per_capita']].nlargest(10, 'gdp_per_capita')

# Plot
plt.figure(figsize=(10, 5))
plt.barh(top_gdp['country'], top_gdp['gdp_per_capita'], color='skyblue')
plt.xlabel("GDP Per Capita (USD)")
plt.ylabel("Country")
plt.title("Top 10 Countries by GDP Per Capita (2022)")
plt.gca().invert_yaxis()  # Invert y-axis for readability
plt.show()
```

```{python}
import seaborn as sns

plt.figure(figsize=(8,5))
sns.scatterplot(data=df, x="gdp_growth_rate", y="inflation_rate", hue="total_population", size="total_population")
plt.xlabel("GDP Growth Rate (%)")
plt.ylabel("Inflation Rate (%)")
plt.title("Relationship between GDP Growth and Inflation (2022)")
plt.legend()
plt.show()

import seaborn as sns

plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x="inflation_rate", y="life_expectancy")
plt.xlabel("Inflation Rate (%)")
plt.ylabel("Life Expectancy (years)")
plt.title("Relationship Between Inflation Rate and Life Expectancy")
plt.show()
```

```{python}
df_summary = df[['gdp_per_capita', 'inflation_rate', 'life_expectancy']].describe().T
df_summary
```

!!!! Use Quarto to include a caption and a reference to the source of the data. Hide your code in the final doculent


As seen in **Figure @fig-gdp-top10**, the countries with the highest GDP per capita are...


```{python}
#| label: fig-gdp-top10
#| fig-cap: "Top 10 Countries by GDP Per Capita"
```

The data comes from the World Bank [@worldbank2022].

[@uddin2020]

[@alam2023]

\`\`\`


```{python}
df_summary = df[['gdp_per_capita', 'inflation_rate', 'life_expectancy']].describe().T
df_summary
```

